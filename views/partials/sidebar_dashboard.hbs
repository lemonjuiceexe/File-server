<aside class="sidebar">
    <fieldset>
        <legend>Create new resource</legend>
        <div class="create-resource-wrapper">
            <button class="create-resource-button" onclick="openDialogHandler('folder')">New folder</button>
            <button class="create-resource-button" onclick="openDialogHandler('file')">New file</button>
        </div>
    </fieldset>
    <fieldset>
        <legend>Upload files</legend>
        <form method="POST" action="/upload" enctype="multipart/form-data">
            <label for="upload" class="upload-label">Upload files</label>
            <input class="upload" id="upload" type="file" name="files" multiple>
            <button type="submit" class="upload-submit">Submit files</button>
        </form>
    </fieldset>
    <dialog id="create-dialog">
        <label for="dialog-name-input" class="dialog-title">
            Pora na nazwanie naszego nowego folderu w {{currentPath}}!
        </label>
        <input class="dialog-input" type="text" id="dialog-name-input">
        <div class="dialog-button-wrapper">
            <button class="dialog-button" onclick="submitDialogHandler()" id="submit-dialog">Create</button>
            <button class="dialog-button" onclick="cancelDialogHandler()">Cancel</button>
        </div>
    </dialog>
</aside>

<script>
    // ----Uploading----

    // ----Creating a resource----
    // Opens a dialog and changes its content depending on type - folder or file
    function openDialogHandler(type) {
        if (!["folder", "file"].includes(type)) {
            throw new Error("Invalid argument in openDialogHandler function.");
        }
        // Change dialog text wheter creating folder or file
        const dialogTitle = document.querySelector(".dialog-title");
        dialogTitle.innerText = `Create new ${type} in {{currentPath}}`;
        const dialogNameInput = document.querySelector("#dialog-name-input");
        dialogNameInput.value = "";
        // Change submit button handler to create folder or file
        const submitButton = document.querySelector("#submit-dialog");
        submitButton.onclick = () => submitDialogHandler(type);

        // Bind escape to cancel and enter to submit
        window.addEventListener("keydown", e => dialogKeyBinds(e, type));

        document.querySelector("#create-dialog").showModal();
    }
    function cancelDialogHandler() {
        // Unbind escape and enter
        window.removeEventListener("keydown", dialogKeyBinds);

        document.querySelector("#create-dialog").close();
    }
    // Fetch to a proper endpoint to create folder or file
    function submitDialogHandler(type) {
        if (!["folder", "file"].includes(type)) {
            throw new Error("Invalid argument in submitDialogHandler function.");
        }
        const nameToCreate = document.querySelector("#dialog-name-input").value;
        const body = {
            resourceName: nameToCreate,
            resourceType: type
        };

        if (nameToCreate != null) {
            fetch("/createResource", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                keepalive: true,
                body: JSON.stringify(body)
            })
                    .then(response => {
                        console.log(response.status);
                        if (response.redirected) {
                            window.location.href = response.url;
                        } else {
                            return response.json();
                        }
                    })
                    .catch(error => console.log(error));
        }
    }
    function dialogKeyBinds(event, type) {
        if (event.key === "Escape") {
            cancelDialogHandler();
        } else if (event.key === "Enter") {
            submitDialogHandler(type);
        }
    }
</script>
